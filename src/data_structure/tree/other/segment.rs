/*!
  线段数(Segment Tree)
  - 用于处理区间查询和区间更新问题。它能够在 `O(log n)` 时间内回答有关数组区间的各种查询
  1. 基本原理
     - 构建线段树：是一棵 `完全二叉树`，每个节点代表一个区间的结果。每个叶子节点对应数组中的一个元素，而每个非叶子节点则表示其左右子区间的合并结果
     - 区间查询：能够在 `O(log n)` 时间内查询某个区间的合并结果(如区间和、区间最小值等)
     - 区间更新：当数组的某个元素发生变化时，线段树能够在 `O(log n)` 时间内更新与该元素相关的所有区间
  2. 时间复杂度
     - 区间查询: O(log n)
     - 区间更新: O(log n)
     - 构建线段树: O(n)
  2. 应用场景
    - 区间和查询: 查询数组某一段区间的和
    - 区间最小值/最大值查询: 查询某一段区间的最小值或最大值
    - 区间更新：更新数组某一段区间的值
*/
pub struct SegmentTree<T> {
    data: T,
}

impl<T> SegmentTree<T> {}
