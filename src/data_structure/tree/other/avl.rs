/*!
   平衡二叉树(AVL树)
   - 一棵二叉搜索树，要求`每个节点的左子树和右子树的 `高度差不超过1`
   - 假设平衡二叉树中共有 `N` 个节点，那么平衡二叉树的高度是 `O(logN)`
      高度计算规则：
      - `叶子节点` 的高度是 `0`，因为它 `没有子节点`
      - `非叶子节点` 的高度则是其左子树和右子树中 `较高` 的那一边的高度加 `1`
             1
            / \
           2   3
          /   / \
         4   5   6
              \
               7
       高度计算:
         - 节点 1:
           - 左子树：以节点 2 为根的子树, 高度为 2
           - 右子树：以节点 3 为根的子树, 高度为 3
           - 计算: max(2, 3) + 1 = 4
         - 节点 2:
           - 左子树：节点 4, 高度为 1
           - 右子树：无
           - 计算: max(1, 0) + 1 = 2
         - 节点 3:
           - 左子树：以节点 5 为根的子树, 高度为 2
           - 右子树：节点 6, 高度为 1
           - 计算: max(2, 1) + 1 = 3
         - 节点 4:
           - 左子树：无
           - 右子树：无
           - 计算: max(0, 0) + 1 = 1
         - 节点 5:
           - 左子树：无
           - 右子树：以节点 7 为根的子树
           - 计算: max(0, 1) + 1 = 2
         - 节点 6:
           - 左子树：无
           - 右子树：无
           - 计算: max(0, 0) + 1 = 1
         - 节点 7:
           - 左子树：无
           - 右子树：无
           - 计算: max(0, 0) + 1 = 1
*/

pub struct AvlTree<T> {
    data: T,
}
