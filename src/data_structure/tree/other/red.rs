/*!
  红黑树(Red Black Tree)
  - 自平衡的二叉查找树（BST），它能够在插入和删除节点时保持平衡，从而保证了树的高度始终保持在对数级别，从而实现高效的查找、插入和删除操作
  - 红黑树是通过对每个节点添加一个 `额外的颜色属性` 来进行平衡的，该颜色属性可以是 `红色` 或 `黑色`
  1. 时间复杂度
     - 插入: O(log n)
     - 查找: O(log n)
     - 删除: O(log n)
  2. 特征
     - 每个节点是 `红色` 或 `黑色`
     - 根节点是 `黑色`
     - 每个叶子节点（NIL节点）是`黑色`
     - 如果一个节点是 `红色` 的，那么它的两个`子节点` 都是 `黑色`（即不允许出现两个连续的红色节点，称为“红色节点不能有红色子节点”）
     - 从`任何一个节点` 到其 `所有子孙叶子节点` 的路径上，经过的 `黑色节点数目相同`, 这个数目被称为该节点的“黑色高度”
  3. 插入和删除
     - 插入：在插入新节点时，`新的节点`总是被插入为 `红色节点`。插入时需要通过 `旋转` 和 `重新着色` 来恢复红黑树的平衡，以满足红黑树的性质
     - 删除：删除操作较为复杂，通常需要借助 `兄弟节点的替代` 等技巧来恢复红黑树的性质
  4. 旋转
     - 左旋(Left Rotation): 将某个节点的 `右子树` 提升为 `父节点`，`原父节点` 变为 `左子节点`
     - 右旋(Right Rotation): 将某个节点的 `左子树` 提升为 `父节点`，`原父节点` 变为 `右子节点`
*/

pub struct RedBlackTree<T> {
    data: T,
}
