/*!
 哈希表
 存储键值对(key-value), 通过哈希函数将键(key)映射到一个数组的索引位置，从而快速访问值(value), 数据是无序随机分布的。
 数组：存储数据的容器，也叫“桶”或“槽”。
 1. 时间复杂度
    - 查找: O(1), 最坏情况: O(N)
    - 插入: O(1), 最坏情况: O(N)
    - 删除: O(1), 最坏情况: O(N)
 2. 空间复杂度
    - 取决于其大小和存储的元素个数，通常为 O(N)，其中 N 是哈希表的大小。
 3. 工作原理
    - 哈希函数
      - 通过一个哈希函数(通常是 hash(key))转化数组中的索引, 计算出相应的键(key)
      - 将键均匀地分布到哈希表的每个槽(slot)上
    - 冲突处理
      - 链式地址法(拉链法)
        - 每个槽位保存一个链表（或其他数据结构），当多个键冲突时，将它们放入同一个链表中
      - 开放地址法
        - 当冲突发生时，尝试在哈希表中找到另一个空槽来存储冲突的元素
    - 负载因子
      - 默认为 `0.75`
      - 负载因子是一个哈希表装满的程度的度量
      - 负载因子越大，说明哈希表里面存储的 key-value 对越多，哈希冲突的概率就越大，哈希表的操作性能就越差
      - 计算公式: size(key-value 对的数量) / table.length(哈希表底层数组的容量)
      - 链式地址法(拉链法)负载因子可以无限大, 开放地址法负载因子不会超过 `1`
      - 哈希表内元素达到负载因子时，哈希表会扩容
    - 扩容
      - 当哈希表内元素达到负载因子时，哈希表会扩容
      - 扩容会导致同一个 `key` 的哈希值可能变化
   4. 应用场景
      哈希表广泛应用于需要快速查找、插入、删除的数据结构中，如：
      - 数据库索引：数据库中的索引通常使用哈希表来加速查找操作。
      - 缓存：哈希表可以用来实现缓存机制（例如LRU缓存），快速访问已缓存的数据。
      - 计数器和频率统计：通过哈希表，可以统计每个元素出现的次数。
      - 集合操作：例如，判断一个元素是否在集合中存在等。
*/

mod chain;
mod linear;
mod open;
pub mod test;
