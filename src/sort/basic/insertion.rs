/*!
 插入排序(Insertion Sort)
 1. 思想: 通过构建有序序列，从而将未排序的元素逐一插入到已排序的部分中
 2. 时间复杂度:
    - 最优: O(n)(已排序)
    - 最差：O(n2)
    - 平均: O(n2)
 3. 空间复杂度: O(1)
 4. 特点: 对接近有序的数据效率高；实现简单

  步骤:
  1. 从数组的第二个元素开始，将当前元素与前面已排序的元素逐一比较，直到找到合适的位置插入当前元素
  2. 将所有大于当前元素的元素向右移动一位
  3. 插入元素
  4. 重复上述过程直到整个数组有序
  ps: 工作原理类似于我们整理扑克牌：从左到右地逐个检查扑克牌，并将每一张插入到已整理好的牌堆中
*/

pub fn insertion_sort<T: Ord>(arr: &mut [T]) {
    let n = arr.len();
    if n == 0 || n == 1 {
        return;
    }

    for i in 1..n {
        let mut j = i;

        // 每次比较 j 之前的元素
        while j > 0 && arr[j - 1] > arr[j] {
            arr.swap(j - 1, j);
            j -= 1;
        }
    }
}
